# CoCalc Examples Documentation File
# Copyright: SageMath Inc., 2016
# License:   Creative Commons: Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)
---
language: sage
category: Mathematics  / Combinatorics
---
title: Introduction
descr: |
    This goes through some of the basic functionalities regarding combinatorics.
    Check out these resources for more in-depth information:

    * [Tutorial/Combinatorics](https://doc.sagemath.org/html/en/reference/combinat/sage/combinat/tutorial.html)
    * [Reference/Combinatorics](https://doc.sagemath.org/html/en/reference/combinat/index.html)
    * [Reference/Graph Theory](https://doc.sagemath.org/html/en/reference/graphs/index.html)
code: ""
---
title: Permutations
descr: >
    SageMath offers various way to construct and work with [Permutations](http://doc.sagemath.org/html/en/reference/combinat/sage/combinat/permutation.html).
code: |
    p = Permutation([2,3,7,4,5,6,1])
    print p.left_tableau()
    print p.longest_increasing_subsequences()
    print p.complement()
    print p.peaks()
    print p.retract_okounkov_vershik(6)
    print p.saliances()
    # and many more: https://doc.sagemath.org/html/en/reference/combinat/sage/combinat/permutation.html
---
title: Cartesian Product
descr: |
    Build a [cartesian product](https://doc.sagemath.org/html/en/reference/combinat/sage/combinat/cartesian_product.html) of sets.
code: |
    S1 = Permutations(3)
    S2 = ['A', 'B']
    cp = cartesian_product([S1, S2])
    print cp
    print cp.cardinality()
    print cp.list()
---
title: Finite State Machine
descr: |
    Transitions and a plot of a [Finite State Machine](https://doc.sagemath.org/html/en/reference/combinat/sage/combinat/finite_state_machine.html)
code: |
    fsm = Automaton([(0, 0, 0), (0, 1, 1), (0, 0, 2), (1, 2, 2), (2, 0, 0)], initial_states=[0, 1, 2], final_states=[0, 1])
    for transition in fsm.accessible_components().transitions():
        print transition
    fsm.plot()
---
title: Integer Vectors
descr: |
    List all [integer vectors](https://doc.sagemath.org/html/en/reference/combinat/sage/combinat/integer_vector.html) of length 3 that sum up to 5 with a max component of 2.
code: |
    IV = IntegerVectors(5,3,max_part=2)
    print list(IV)
---
title: Conjugate Subgroups
descr: |
    [Conjugate](https://doc.sagemath.org/html/en/reference/groups/sage/groups/perm_gps/permgroup.html#sage.groups.perm_gps.permgroup.PermutationGroup_generic.conjugate) a subgroup of the [symmetric group](http://doc.sagemath.org/html/en/reference/groups/sage/groups/perm_gps/permgroup.html).
code: |
    S4 = SymmetricGroup(4)
    G = S4.subgroup([[2,1]])
    print G
    h = S4([1,3,2,4])
    print h
    H = G.conjugate(h)
    print H
